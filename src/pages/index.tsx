/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable react-hooks/exhaustive-deps */
import Head from "next/head";
import * as S from "@styles/pages/Home";
import { SelectUI } from "@components/SelectUI";
import { Context, useContext, useEffect, useState } from "react";
import { useGetBrands } from "@services/GET/useGetBrands";
import { useGetModels } from "@services/GET/useGetModels";
import { ButtonUI } from "@components/ButtonUI";
import { useRouter } from "next/router";
import { FiltersContext } from "@context/FiltersContext";
import { useGetYears } from "@services/GET/useGetYears";
import { dehydrate, QueryClient } from "react-query";
import { API } from "@services/api";

export default function Home() {
  const { filters, setFilters, options, setOptions } = useContext(
    FiltersContext as Context<IContext>
  );

  const { dataBrands } = useGetBrands()
  const { dataModels } = useGetModels(filters.brands);
  const { dataYears } = useGetYears(filters);

  const navigate = useRouter();

  function getOptions(data: IResponse[], nameSelect: string) {
    if (data) {
      let options = data.map((element) => {
        return { label: element.nome, value: element.codigo };
      });
      return [{ label: nameSelect, value: " " }, ...options];
    } else return [{ label: nameSelect, value: " " }];
  }

  function isButtonDisabled() {
    if ((filters.brands && filters.models && filters.years) !== " ") {
      return false;
    } else return true;
  }

  useEffect(() => {
    if (dataBrands) {
      setOptions({
        ...options,
        brands: getOptions(dataBrands, "Marcas"),
      });
    }
  }, [dataBrands]);

  useEffect(() => {
    if (dataModels) {
      setOptions({
        ...options,
        models: getOptions(dataModels.modelos, "Modelos"),
      });
    }
  }, [dataModels]);

  useEffect(() => {
    if (dataYears) {
      setOptions({
        ...options,
        years: getOptions(dataYears, "Anos"),
      });
    }
  }, [dataYears]);

  useEffect(() => {
    setFilters({ brands: " ", models: " ", years: " " });
  }, []);

  return (
    <S.Container>
      <Head>
        <title>Consulta Fipe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <S.SectionContainer>
        <h1>Tabela Fipe</h1>
        <h3>Consulte o valor de um veículo de forma gratuita</h3>
        <S.FiltersContainer>
          <SelectUI
            id="brand-select"
            onChange={(event) => {
              setFilters({ ...filters, brands: event.target.value });
            }}
            options={options.brands}
            value={filters.brands}
            defaultValue={filters.brands}
            maxWidth={"25rem"}
          />
          <SelectUI
            id="models-select"
            onChange={(event) => {
              setFilters({ ...filters, models: event.target.value });
            }}
            options={options.models}
            value={filters.models}
            defaultValue={filters.models}
            maxWidth={"25rem"}
          />
          {filters.models !== " " && (
            <SelectUI
              id="years-select"
              onChange={(event) => {
                setFilters({ ...filters, years: event.target.value });
              }}
              options={options.years}
              value={filters.years}
              defaultValue={filters.years}
              maxWidth={"25rem"}
            />
          )}
          <ButtonUI
            backgroundColor="var(--color-purple)"
            disabled={isButtonDisabled()}
            onClick={() => {
              navigate.push("/results");
            }}
            textColor="var(--color-white)"
            maxWidth="20rem"
          >
            Consultar preço
          </ButtonUI>
        </S.FiltersContainer>
      </S.SectionContainer>
    </S.Container>
  );
}

export async function getStaticProps() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery(["getBrands"], async () => {
    const { data } = await API.get("/fipe/api/v1/carros/marcas");
    return data;
  });
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}